{"version":3,"file":"index.js","sources":["../Communicator.js"],"sourcesContent":["import { isObject, isFunction } from \"lodash\";\n\n/* import  */\n\n/**\n * @description Error object containing error messages\n * @todo Implement proper error objects\n * @memberof Communicator\n */\nconst errors = {\n  PREFETCH_NOT_A_FUNCTION:\n    \"Prefetch is expected to be a function. I dont know what I have here...\",\n  PARAMS_NOT_OBJECT: \"Error with params. You shoud pass object as params.\",\n  PARAM_OBJECT_ERROR:\n    \"Error, your object, in params... There is something wrong with it.\"\n};\n\n/**\n * @description Merges 2 object recursavly, overriding values from second to first object.\n * @param {Obect} obj1 - firs object, will be overriden\n * @param {Obect} obj2 - second object\n */\nconst mergeTwo = (obj1, obj2) => {\n  const _obj2 = obj2;\n  let out = {};\n  Object.keys(obj1).forEach(k => {\n    if (typeof obj1[k] === \"object\" && obj1[k].constructor !== Array) {\n      if (obj2[k] && typeof obj2[k] === \"object\") {\n        out[k] = mergeTwo(obj1[k], obj2[k]);\n      } else {\n        out[k] = obj1[k];\n      }\n    } else if (obj1[k].constructor === Array) {\n      out[k] = obj1[k];\n      if (obj2[k] && obj2[k].constructor === Array) {\n        out[k] = obj1[k].concat(obj2[k]);\n      }\n    } else if (obj2[k]) {\n      out[k] = obj2[k];\n    } else out[k] = obj1[k];\n    delete _obj2[k];\n  });\n  out = Object.assign({}, out, _obj2);\n  return out;\n};\n/**\n * @description Merges multiple objects recursevly\n * @param {Spread of objects} args\n */\nconst deepMerge = (...args) => {\n  let out = {};\n  args.forEach(e => {\n    if (e.constructor === Object) out = mergeTwo(out, e);\n  });\n  return out;\n};\n\nclass Communicator {\n  constructor(baseUrl = \"localhost:3000\", dispatch = null) {\n    this.baseUrl = baseUrl;\n    this.dispatch = dispatch;\n    this.fetch = fetch.bind(window);\n    this.reducerPool = {};\n    this.basePrefix = \"api(.)(.)\";\n    this.baseOptions = {\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Cache: \"no-cache\",\n        credentials: \"same-origin\"\n      }\n    };\n  }\n\n  /**\n   * @description Function used for constructing url and inserting parametars in to the\n   * predefined holders.\n   * @example\n   * baseUrl = localhost\n   * url = /url/:id\n   * request = {id: '22'}\n   * output = localhost/url/22\n   * Function also accepts absolute url, in which case will skip adding base url.\n   * Absoulute url must contain http:// or https://\n   * @example\n   * baseUrl = localhost\n   * url = http://someurl.com/url/:id\n   * request = {id: '22'}\n   * output = someurl.com/url/22\n   * @param {Object} - request object\n   * @param {String} - original url\n   * @return {String} - url with inserted request parametars\n   * @memberof Communicator\n   */\n  constructUrl = (endPointUrl, request) => {\n    let url = endPointUrl;\n    const excluded = [\"body\", \"GET\"];\n    if (endPointUrl.indexOf(\"http\") === -1) {\n      url = `${this.baseUrl}${endPointUrl}`;\n    }\n    if (isObject(request)) {\n      Object.keys(request).forEach(key => {\n        if (excluded.indexOf(key) === -1) {\n          const regex = new RegExp(`:${key}`);\n          if (regex.test(url)) {\n            url = url.replace(regex, request[key]);\n          }\n        } else if (key === \"GET\") {\n          url = url + this.getGetParamsAsString(request[key]);\n        }\n      });\n    }\n    return url;\n  };\n\n  /**\n   * @description Helper function that converts js object to GET params string.\n   * {id:'123', user:'some'} -> \"?id=123&user=some\"\n   * @param {Object} getObj - object containing GET key value pairs\n   * @memberof Communicator\n   */\n  getGetParamsAsString = getObj => {\n    let out = \"?\";\n    Object.keys(getObj).forEach((k, i) => {\n      if (typeof getObj[k] !== \"object\" && typeof getObj[k] !== \"function\")\n        out = out + (i !== 0 ? \"&\" : \"\") + k + \"=\" + getObj[k];\n    });\n    return out;\n  };\n\n  /**\n   * @description\n   * Helper function that extracts , checks and prepares body object\n   * @param {Object} request - request object containing body key.\n   * body can either be preparsed or as js object.\n   * @returns {Object} - {body: JSON.stringify()}\n   */\n  getBody = request => {\n    if (!request.body) return false;\n    if (typeof request.body === \"string\" && isObject(JSON.parse(request.body)))\n      return { body: request.body };\n    if (isObject(request.body)) return { body: JSON.stringify(request.body) };\n    return false;\n  };\n\n  /**\n   * @description Function that processes params of the request such as body.\n   * You can send value either as object or as stringified object\n   * @param {Object} - params object\n   * @return {Object} - object containing keys and stringified values\n   * @memberof Communicator\n   *\n   */\n  processParams = params => {\n    /* TODO - separate body and rest. add ability to pass new fetch options overrides */\n    if (!isObject(params)) throw errors.PARAMS_NOT_OBJECT;\n    const out = {};\n    Object.keys(params).forEach(k => {\n      switch (typeof params[k]) {\n        case \"object\":\n          out[k] = JSON.stringify(params[k]);\n          break;\n        case \"string\":\n          if (!isObject(JSON.parse(params[k]))) {\n            throw errors.PARAM_OBJECT_ERROR;\n          } else out[k] = params[k];\n          break;\n        default:\n          break;\n      }\n    });\n    return out;\n  };\n\n  /**\n   * @description This is a main fetch function. This will resolve the action and return either a Promise if no\n   *  dispatch is provided or it will dispatch\n   * success/ failure action to redux.\n   * @param {String} url - target url. This will be modified by request object if needed\n   * @param {Object} options - options of the request. Options contains data like headers, method\n   * type and other data you want to include to fetch request.\n   * This will be merged with baseOptions ( globals you can set at creation, options that apply to\n   *  all) and param options. Param options contains aditional\n   * data like body or can modifiy request overriding baseOptions and setted request options.\n   * @param {Object} request - object containing request data that will modify end URL. TODO -\n   * maybe move body params here...\n   * @param {String} name - Name of the api action. Based on name a appropriate action will be\n   * dispatched.\n   * @param {Boolean} useEmptyHeaders - if true, empty headers will be sent.\n   * @todo expected response json/text\n   */\n  baseFetch = (\n    url,\n    options = {},\n    request = {},\n    params = {},\n    name,\n    useEmptyHeaders = false\n  ) => {\n    /* construct url */\n    const endPointUrl = this.constructUrl(url, request);\n    /* set params */\n    let _params;\n    try {\n      _params = this.processParams(params);\n    } catch (e) {\n      console.log(e.message);\n      return e;\n    }\n    /* merge (TODO deep) baseOptions<-options<-params options */\n    /* let endOption = Object.assign({}, this.baseOptions, options, _params); */\n    let endOption = deepMerge(\n      this.baseOptions,\n      options,\n      _params,\n      this.getBody(request)\n    );\n    /* clear headers if needed */\n    if (useEmptyHeaders) endOption = { headers: {} };\n    /* if no dispatch return promise */\n    if (!this.dispatch || this.dispatch === null) {\n      console.log(\"no dispatch\");\n      return this.fetch(endPointUrl, endOption);\n    }\n    /* dispatch action start */\n    this.dispatch(this.actionStart(name, endPointUrl, endOption));\n    /* fetch part */\n    let res;\n    this.fetch(endPointUrl, endOption)\n      .then(response => {\n        /* this object will be passes to second .then to be included in END dispatch */\n        res = {\n          ok: response.ok,\n          redirected: response.redirected,\n          status: response.status,\n          type: response.type,\n          url: response.url\n        };\n        if (response.status === 200 || response.ok) {\n          return Promise.all([response.json(), Promise.resolve(res)]);\n        }\n        throw response;\n      })\n      .then(json => {\n        this.dispatch(this.actionEnd(name, json[0], json[1]));\n      })\n      .catch(e => {\n        this.dispatch(this.actionError(name, res, e.message));\n      });\n    return true;\n  };\n\n  /**\n   * @description Function that creates functions from objects\n   * @param {Object} endpoints - object from witch function will be created.\n   * Keys will be the function names.\n   * @memberof Communicator\n   */\n  setEndpoints = endpoints => {\n    Object.keys(endpoints).forEach(k => {\n      const { url, prefetch, reducer, options, useEmptyHeaders } = endpoints[k];\n\n      if (reducer) this.reducerPool[k] = reducer;\n      else this.reducerPool[k] = this.constructGenericReducer(k);\n\n      this[k] = (request = {}, params = {}) => {\n        if (prefetch && isFunction(prefetch)) {\n          this.resolvePrefetch(prefetch, url, request, params);\n        } else {\n          this.baseFetch(url, options, request, params, k, useEmptyHeaders);\n        }\n      };\n    });\n  };\n\n  /**\n   * @description Reducer you export to your store.\n   * This will extract name of the function ( as it containes prefix and sufix).\n   * Calls generic reducer set for given name.\n   * @param {Object} state - state\n   * @param {Object} action - action\n   * @memberof Communicator\n   */\n  reducer = (state = this.genererateInitialState(), action) => {\n    if (action.type.indexOf(this.basePrefix) === -1) return state;\n    let name = action.type.substring(this.basePrefix.length);\n    if (name.indexOf(\"_success\") !== -1) {\n      name = name.replace(\"_success\", \"\");\n    }\n    if (name.indexOf(\"_fail\") !== -1) {\n      name = name.replace(\"_fail\", \"\");\n    }\n    return this.reducerPool[name](state, action);\n  };\n\n  /**\n   * @description reducer for specific function name\n   * @param {String} k - name of the function\n   * @param {Object} state - state\n   * @param {Object} action - action\n   * @memberof Communicator\n   */\n  constructGenericReducer = k => (state, action) => {\n    const newState = { ...state };\n    newState.isLoading = action.loading;\n    if (action.type.indexOf(\"_success\") !== -1) {\n      newState[k].data = action.payload.data;\n      newState[k].ok = action.payload.msg.ok;\n      newState[k].redirected = action.payload.msg.redirected;\n      newState[k].status = action.payload.msg.status;\n      newState[k].type = action.payload.msg.type;\n    } else if (action.type.indexOf(\"_fail\") !== -1) {\n      newState[k].ok = action.payload.msg.ok;\n      newState[k].redirected = action.payload.msg.redirected;\n      newState[k].status = action.payload.msg.status;\n      newState[k].type = action.payload.msg.type;\n      newState[k].error = action.payload.error;\n    } else {\n      newState[k].request = action.payload.request;\n      newState[k].params = action.payload.params;\n    }\n    return newState;\n  };\n\n  /**\n   * @description Function that creates initial state for each api call for reducer.\n   * @returns state for api reducer\n   */\n  genererateInitialState = () => {\n    const state = {};\n    state.isLoading = false;\n    Object.keys(this.reducerPool).forEach(k => {\n      state[k] = {\n        request: \"\",\n        params: \"{}\",\n        data: undefined,\n        ok: undefined,\n        redirected: undefined,\n        status: 0,\n        type: \"\"\n      };\n    });\n    return state;\n  };\n\n  /**\n   * @description Function that creates redux action.\n   * Adds pefix to type\n   * @param {String} name - name of the action\n   * @param {Object} request - payload item\n   * @param {Object} params - payload item\n   */\n  actionStart = (name, request, params) => ({\n    type: `${this.basePrefix}${name}`,\n    /* name, */\n    loading: true,\n    payload: {\n      request,\n      params\n    }\n  });\n  /**\n   * @description Function that creates redux action.\n   * Adds sufix to type\n   * @param {String} name - name of the action\n   * @param {Object} request - payload item\n   * @param {Object} params - payload item\n   */\n  actionEnd = (name, data, msg = {}) => ({\n    type: `${this.basePrefix}${name}_success`,\n    /* name, */\n    loading: false,\n    payload: {\n      data,\n      msg\n    }\n  });\n  /**\n   * @description Function that creates redux action.\n   * Adds sufix to type\n   * @param {String} name - name of the action\n   * @param {Object} request - payload item\n   * @param {Object} params - payload item\n   */\n  actionError = (name, msg = {}, error) => ({\n    type: `${this.basePrefix}${name}_fail`,\n    loading: false,\n    payload: {\n      msg,\n      error\n    }\n  });\n\n  /* TODO prefetch */\n  /* resolvePrefetch = (prefetch, url, request, params) => {\n    if (!prefetch || !_.isFunction(prefetch)) {\n      console.log(errors.PREFETCH_NOT_A_FUNCTION);\n      return false;\n    }\n    this.baseFetch();\n  }; */\n\n  getReducer = () => this.reducer;\n  setBaseUrl = url => {\n    this.baseUrl = url;\n  };\n  setDispatcher = dispatch => {\n    this.dispatch = dispatch;\n  };\n  setPrefix = prefix => {\n    this.basePrefix = prefix;\n  };\n  setFetch = _fetch => {\n    this.fetch = _fetch.bind(window);\n  };\n  setBaseOptions = options => {\n    this.baseOptions = options;\n  };\n}\n\nexport default new Communicator();\n"],"names":["errors","mergeTwo","obj1","obj2","_obj2","out","keys","forEach","babelHelpers.typeof","k","constructor","Array","concat","Object","assign","deepMerge","args","e","Communicator","baseUrl","dispatch","fetch","bind","window","reducerPool","basePrefix","baseOptions","constructUrl","endPointUrl","request","url","excluded","indexOf","isObject","key","regex","RegExp","test","replace","getGetParamsAsString","getObj","i","getBody","body","JSON","parse","stringify","processParams","params","PARAMS_NOT_OBJECT","PARAM_OBJECT_ERROR","baseFetch","options","name","useEmptyHeaders","_params","log","message","endOption","headers","actionStart","res","then","response","ok","redirected","status","type","Promise","all","json","resolve","actionEnd","catch","actionError","setEndpoints","endpoints","prefetch","reducer","constructGenericReducer","isFunction","resolvePrefetch","state","genererateInitialState","action","substring","length","newState","isLoading","loading","data","payload","msg","error","undefined","getReducer","setBaseUrl","setDispatcher","setPrefix","prefix","setFetch","_fetch","setBaseOptions"],"mappings":"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"}